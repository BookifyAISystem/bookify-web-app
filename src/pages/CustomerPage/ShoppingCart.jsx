import React, { useState, useEffect } from "react";
import {
    getAllOrderDetails,
    updateOrderDetail,
} from "../../services/orderDetailService";
import { getBookById } from "../../services/bookService";
import deleteIcon from "../../assets/icon/delete.svg";
import "./ShoppingCart.css";

const ShoppingCart = () => {
    const [cartItems, setCartItems] = useState([]);
    const [selectedItems, setSelectedItems] = useState([]);
    const [selectAll, setSelectAll] = useState(false);

    // ‚úÖ L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ OrderDetailService (ch·ªâ l·∫•y status = 1)
    const fetchCartData = async () => {
        try {
            const orderDetails = await getAllOrderDetails();
            if (orderDetails) {
                // Ch·ªâ l·∫•y c√°c s·∫£n ph·∫©m c√≥ status = 1
                const validOrders = orderDetails.filter(order => order.status === 1);

                const itemsWithBookDetails = await Promise.all(
                    validOrders.map(async (order) => {
                        const book = await getBookById(order.bookId);
                        return book
                            ? {
                                  orderDetailId: order.orderDetailId,
                                  orderId: order.orderId,
                                  bookId: order.bookId,
                                  title: book.bookName,
                                  image: book.bookImage,
                                  price: order.price,
                                  quantity: order.quantity,
                                  status: order.status,
                              }
                            : null;
                    })
                );

                setCartItems(itemsWithBookDetails.filter(item => item !== null));
            }
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu gi·ªè h√†ng:", error);
        }
    };

    useEffect(() => {
        fetchCartData();
    }, []);

    // ‚úÖ T√≠nh t·ªïng ti·ªÅn d·ª±a tr√™n c√°c s·∫£n ph·∫©m ƒë√£ ch·ªçn
    const totalAmount = selectedItems.reduce(
        (sum, item) => sum + item.price * item.quantity,
        0
    );

    // ‚úÖ X·ª≠ l√Ω ch·ªçn / b·ªè ch·ªçn s·∫£n ph·∫©m
    const handleSelectItem = (item) => {
        let updatedSelectedItems;

        if (selectedItems.some((selected) => selected.orderDetailId === item.orderDetailId)) {
            updatedSelectedItems = selectedItems.filter(
                (selected) => selected.orderDetailId !== item.orderDetailId
            );
        } else {
            updatedSelectedItems = [...selectedItems, item];
        }

        setSelectedItems(updatedSelectedItems);
    };

    // ‚úÖ X·ª≠ l√Ω ch·ªçn t·∫•t c·∫£
    const handleSelectAll = () => {
        if (selectAll) {
            setSelectedItems([]);
        } else {
            setSelectedItems(cartItems.map((item) => ({ ...item })));
        }
        setSelectAll(!selectAll);
    };

    // ‚úÖ X·ª≠ l√Ω c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
    const handleQuantityChange = async (item, type) => {
        const newQuantity = type === "increase" ? item.quantity + 1 : Math.max(1, item.quantity - 1);
    
        const updatedOrderDetail = {
            orderDetailId: item.orderDetailId,
            orderId: item.orderId,
            bookId: item.bookId,
            quantity: newQuantity,
            price: item.price,
            status: item.status,
        };

        console.log("üì§ G·ª≠i request c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", updatedOrderDetail);
    
        try {
            const response = await updateOrderDetail(item.orderDetailId, updatedOrderDetail);
            if (response === 204 || response) {
                console.log("‚úÖ C·∫≠p nh·∫≠t UI sau khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng.");
                fetchCartData(); // üîÑ C·∫≠p nh·∫≠t gi·ªè h√†ng ngay sau khi update
            }
        } catch (error) {
            alert("‚ùå L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m.");
            console.error("L·ªói c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", error);
        }
    };

    // ‚úÖ X√≥a s·∫£n ph·∫©m (chuy·ªÉn status = 0 thay v√¨ x√≥a th·∫≠t)
    const handleDeleteItem = async (item) => {
        try {
            const updatedOrderDetail = {
                ...item,
                status: 0, // ƒê√°nh d·∫•u l√† ƒë√£ x√≥a
            };

            const deleteResponse = await updateOrderDetail(item.orderDetailId, updatedOrderDetail);
            if (deleteResponse) {
                console.log("üóë S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a (status = 0)");
                fetchCartData(); // üîÑ C·∫≠p nh·∫≠t gi·ªè h√†ng ngay sau khi x√≥a
            } else {
                alert("‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m.");
            }
        } catch (error) {
            console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error);
        }
    };

    return (
        <div className="shopping-container">
            {/* C·ªôt b√™n tr√°i: Gi·ªè h√†ng */}
            <div className="shopping-cart">
                <h2>üõí GI·ªé H√ÄNG ({cartItems.length} s·∫£n ph·∫©m)</h2>

                <div className="cart-header">
                    <div className="column checkbox-column">
                        <input type="checkbox" checked={selectAll} onChange={handleSelectAll} />
                    </div>
                    <div className="column product-column">Ch·ªçn t·∫•t c·∫£ ({cartItems.length} s·∫£n ph·∫©m)</div>
                    <div className="column quantity-column">S·ªë l∆∞·ª£ng</div>
                    <div className="column price-column">Th√†nh ti·ªÅn</div>
                    <div className="column delete-column"></div>
                </div>

                {cartItems.length === 0 ? (
                    <p className="empty-cart">Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong gi·ªè h√†ng</p>
                ) : (
                    cartItems.map((item) => (
                        <div key={item.orderDetailId} className="cart-item">
                            <div className="column checkbox-column">
                                <input
                                    type="checkbox"
                                    checked={selectedItems.some((selected) => selected.orderDetailId === item.orderDetailId)}
                                    onChange={() => handleSelectItem(item)}
                                />
                            </div>
                            <div className="column product-column">
                                <img src={item.image} alt={item.title} className="book-image" />
                                <div className="book-info">
                                    <p className="book-title">{item.title}</p>
                                    <p className="price">{item.price.toLocaleString()} ƒë</p>
                                </div>
                            </div>
                            <div className="column quantity-column">
                                <div className="quantity-control">
                                    <button className="qty-btn" onClick={() => handleQuantityChange(item, "decrease")}>-</button>
                                    <input type="text" value={item.quantity} className="qty-input" readOnly />
                                    <button className="qty-btn" onClick={() => handleQuantityChange(item, "increase")}>+</button>
                                </div>
                            </div>
                            <div className="column price-column">
                                <p className="total-price">{(item.price * item.quantity).toLocaleString()} ƒë</p>
                            </div>
                            <div className="column delete-column">
                                <button className="delete-button" onClick={() => handleDeleteItem(item)}>
                                    <img src={deleteIcon} alt="X√≥a" className="delete-icon" />
                                </button>
                            </div>
                        </div>
                    ))
                )}
            </div>

            {/* C·ªôt b√™n ph·∫£i: Thanh to√°n */}
            <div className="payment-summary">
                <h3>Thanh To√°n</h3>
                <div className="payment-details">
                    <p>T·ªïng ti·ªÅn:</p>
                    <p className="total-amount">{totalAmount.toLocaleString()} ƒë</p>
                </div>
                <button className="checkout-button" disabled={totalAmount === 0}>THANH TO√ÅN</button>
            </div>
        </div>
    );
};

export default ShoppingCart;
