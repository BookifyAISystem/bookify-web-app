import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { getBookById } from "../../services/bookService";
import { getAccountID } from "../../services/accountService";
import { createOrder, getOrderByAccount } from "../../services/orderService";
import { getOrderDetailsByOrderId, createOrderDetail, updateOrderDetail } from "../../services/orderDetailService";
import "./BookDetail.css";

const BookDetail = () => {
  const { id } = useParams();
  const [book, setBook] = useState(null);
  const [loading, setLoading] = useState(true);
  const [quantity, setQuantity] = useState(1);

  useEffect(() => {
    const fetchBookDetail = async () => {
      const data = await getBookById(id);
      if (data) {
        setBook(data);
      }
      setLoading(false);
    };

    fetchBookDetail();
  }, [id]);

  const handleIncrease = () => setQuantity(quantity + 1);
  const handleDecrease = () => quantity > 1 && setQuantity(quantity - 1);

  const handleAddToCart = async () => {
    const accountId = getAccountID();
    if (!accountId) {
        alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m v√†o gi·ªè h√†ng.");
        return;
    }

    try {
        // üõë Ki·ªÉm tra ƒë∆°n h√†ng h·ª£p l·ªá
        let order = await getOrderByAccount(accountId);
        console.log("üì¶ ƒê∆°n h√†ng hi·ªán t·∫°i t·ª´ API:", order);

        let isNewOrder = false;

        if (!order || !order.orderId || order.status !== 1) {
            console.log("üöÄ ƒê∆°n h√†ng kh√¥ng h·ª£p l·ªá (status != 1), t·∫°o ƒë∆°n h√†ng m·ªõi...");

            order = await createOrder({
                accountId: accountId,
                voucherId: null,
                orderDetails: [],
            });

            console.log("üì§ ƒê∆°n h√†ng m·ªõi ƒë∆∞·ª£c t·∫°o:", order);
            isNewOrder = true;

            // Ch·ªù backend c·∫≠p nh·∫≠t tr∆∞·ªõc khi l·∫•y l·∫°i order
            await new Promise(res => setTimeout(res, 500));

            if (!order || !order.orderId) {
                console.warn("‚ö† API createOrder kh√¥ng tr·∫£ v·ªÅ orderId, th·ª≠ l·∫•y order g·∫ßn nh·∫•t...");
                order = await getOrderByAccount(accountId);
            }

            if (!order || !order.orderId) {
                console.error("‚ùå API createOrder l·ªói! Kh√¥ng c√≥ ƒë∆°n h√†ng h·ª£p l·ªá.");
                alert("Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng m·ªõi. Vui l√≤ng th·ª≠ l·∫°i.");
                return;
            }
        }

        const orderId = order.orderId;
        console.log(`‚úÖ ƒê∆°n h√†ng h·ª£p l·ªá c√≥ ID: ${orderId}, Status: ${order.status}`);

        // üõë L·∫•y danh s√°ch orderDetails c·ªßa ƒë∆°n h√†ng hi·ªán t·∫°i
        let orderDetails = await getOrderDetailsByOrderId(orderId);
        console.log("üõí Danh s√°ch s·∫£n ph·∫©m trong ƒë∆°n h√†ng:", orderDetails);

        if (!Array.isArray(orderDetails)) {
            console.warn("‚ö†Ô∏è orderDetails kh√¥ng ph·∫£i m·∫£ng. T·∫°o m·∫£ng r·ªóng.");
            orderDetails = [];
        }

        // ‚úÖ Ch·ªâ l·∫•y orderDetail thu·ªôc ƒë∆°n h√†ng m·ªõi nh·∫•t
        let existingItem = orderDetails.find(detail => detail.bookId === book.bookId && detail.orderId === orderId);

        if (existingItem) {
            console.log(`üìå Ki·ªÉm tra ƒëi·ªÅu ki·ªán: order.status = ${order.status}, orderDetail.status = ${existingItem.status}`);

            if (existingItem.status === 1) {
                console.log("üîº S·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng...");
                await updateOrderDetail(existingItem.orderDetailId, {
                    orderId: orderId,
                    bookId: book.bookId,
                    quantity: existingItem.quantity + 1,
                    price: book.price,
                    status: 1
                });
            } else if (existingItem.status === 0) {
                console.log("üîÅ S·∫£n ph·∫©m t·ª´ng b·ªã x√≥a, th·ª≠ c·∫≠p nh·∫≠t l·∫°i...");

                const updateResponse = await updateOrderDetail(existingItem.orderDetailId, {
                    orderId: orderId,
                    bookId: book.bookId,
                    quantity: 1,
                    price: book.price,
                    status: 1,
                });

                if (!updateResponse) {
                    console.log("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i! Thay v√†o ƒë√≥, t·∫°o m·ªõi orderDetail...");
                    await createOrderDetail({
                        orderId: orderId,
                        bookId: book.bookId,
                        quantity: 1,
                        price: book.price,
                        status: 1
                    });
                }
            }
        } else {
            console.log("‚ûï S·∫£n ph·∫©m ch∆∞a c√≥, t·∫°o m·ªõi orderDetail...");

            await createOrderDetail({
                orderId: orderId,
                bookId: book.bookId,
                quantity: 1,
                price: book.price,
                status: 1
            });

            // Ch·ªù API c·∫≠p nh·∫≠t r·ªìi ki·ªÉm tra l·∫°i orderDetails
            await new Promise(res => setTimeout(res, 500));
            orderDetails = await getOrderDetailsByOrderId(orderId);
            console.log("‚úÖ Ki·ªÉm tra l·∫°i orderDetails sau khi th√™m:", orderDetails);
        }
        alert(`üéâ ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng!`);
    } catch (error) {
        console.error("‚ùå L·ªói khi th√™m v√†o gi·ªè h√†ng:", error);
        alert("ƒê√£ x·∫£y ra l·ªói khi th√™m v√†o gi·ªè h√†ng.");
    }
};


  
  
  if (loading) return <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>;
  if (!book) return <p>Kh√¥ng t√¨m th·∫•y s√°ch!</p>;

  return (
    <div className="book-detail-container">
      <div className="book-detail">
        <div className="book-detail-left">
          <img src={book.bookImage} alt={book.bookName} className="book-detail-image" />

          <div className="quantity-selector">
            <button className="quantity-btn" onClick={handleDecrease}>-</button>
            <span className="quantity-number">{quantity}</span>
            <button className="quantity-btn" onClick={handleIncrease}>+</button>
          </div>

          <div className="book-actions">
            <button className="add-to-cart" onClick={handleAddToCart}>
              <i className="fas fa-shopping-cart"></i> Th√™m v√†o gi·ªè h√†ng
            </button>
            <button className="buy-now">Mua ngay</button>
          </div>

          <div className="book-policies">
            <h3>Ch√≠nh s√°ch ∆∞u ƒë√£i c·ªßa Bookify</h3>
            <ul>
              <li><i className="fas fa-truck"></i> Th·ªùi gian giao h√†ng: Giao nhanh v√† uy t√≠n</li>
              <li><i className="fas fa-exchange-alt"></i> Ch√≠nh s√°ch ƒë·ªïi tr·∫£: ƒê·ªïi tr·∫£ mi·ªÖn ph√≠ to√†n qu·ªëc</li>
              <li><i className="fas fa-users"></i> Ch√≠nh s√°ch kh√°ch s·ªâ: ∆Øu ƒë√£i khi mua s·ªë l∆∞·ª£ng l·ªõn</li>
            </ul>
          </div>
        </div>

        <div className="book-detail-right">
          <h1 className="book-title">{book.bookName}</h1>

          <div className="book-price-section">
            <p className="book-price">Gi√° s√°ch in: <strong>{book.price.toLocaleString()} VND</strong></p>
            {book.priceEbook && (
              <p className="book-ebook-price">Gi√° s√°ch ƒëi·ªán t·ª≠: <strong>{book.priceEbook.toLocaleString()} VND</strong></p>
            )}
          </div>

          <div className="book-description">
            <h3>M√¥ t·∫£</h3>
            <p>{book.description}</p>
          </div>

          <div className="book-specifications">
            <h3>Th√¥ng tin chi ti·∫øt</h3>
            <table>
              <tbody>
                <tr>
                  <th>NƒÉm xu·∫•t b·∫£n</th>
                  <td>{book.publishYear || "ƒêang c·∫≠p nh·∫≠t"}</td>
                </tr>
                <tr>
                  <th>Th·ªÉ lo·∫°i</th>
                  <td>{book.bookType || "ƒêang c·∫≠p nh·∫≠t"}</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

export default BookDetail;
