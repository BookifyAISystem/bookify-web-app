import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { getBookById } from "../../services/bookService";
import { getAccountID } from "../../services/accountService";
import { createOrder, getOrderByAccount } from "../../services/orderService";
import { getOrderDetailsByOrderId, createOrderDetail, updateOrderDetail } from "../../services/orderDetailService";
import "./BookDetail.css";

const BookDetail = () => {
  const { id } = useParams();
  const [book, setBook] = useState(null);
  const [loading, setLoading] = useState(true);
  const [quantity, setQuantity] = useState(1);
  const [showSummary, setShowSummary] = useState(false);
  const [generatedSummary, setGeneratedSummary] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [displaySummary, setDisplaySummary] = useState("");

  useEffect(() => {
    const fetchBookDetail = async () => {
      const data = await getBookById(id);
      if (data) {
        setBook(data);
      }
      setLoading(false);
    };

    fetchBookDetail();
  }, [id]);

  useEffect(() => {
    let intervalId;
    if (showSummary && generatedSummary) {
      let currentIndex = 0;
      setDisplaySummary("");
      setIsGenerating(true);
      
      intervalId = setInterval(() => {
        if (currentIndex < generatedSummary.length) {
          setDisplaySummary(prev => prev + generatedSummary[currentIndex]);
          currentIndex++;
        } else {
          clearInterval(intervalId);
          setIsGenerating(false);
        }
      }, 50); // T·ªëc ƒë·ªô g√µ ch·ªØ: 50ms/k√Ω t·ª±
    }

    return () => {
      clearInterval(intervalId);
      setIsGenerating(false);
    };
  }, [showSummary, generatedSummary]);

  const handleIncrease = () => setQuantity(quantity + 1);
  const handleDecrease = () => quantity > 1 && setQuantity(quantity - 1);

  const handleAddToCart = async () => {
    const accountId = getAccountID();
    if (!accountId) {
        alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m v√†o gi·ªè h√†ng.");
        return;
    }

    try {
        let order = await getOrderByAccount(accountId);
        console.log("üì¶ ƒê∆°n h√†ng hi·ªán t·∫°i:", order);

        if (!order || !order.orderId) {
            order = await createOrder({
                accountId: accountId,
                voucherId: null,
                orderDetails: [],
            });

            console.log("üì§ ƒê∆°n h√†ng m·ªõi t·∫°o:", order);
            if (!order || !order.orderId) {
                alert("Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng m·ªõi.");
                return;
            }
        }

        const orderId = order.orderId;
        console.log(`‚úÖ S·ª≠ d·ª•ng orderId: ${orderId}`);

        let orderDetails = await getOrderDetailsByOrderId(orderId);
        console.log("üõí OrderDetails nh·∫≠n ƒë∆∞·ª£c:", orderDetails);

        if (!Array.isArray(orderDetails)) {
            console.error("‚ùå orderDetails kh√¥ng ph·∫£i l√† m·ªôt m·∫£ng:", orderDetails);
            orderDetails = [];
        }

        // ‚úÖ Ki·ªÉm tra s·∫£n ph·∫©m c√≥ trong gi·ªè h√†ng kh√¥ng
        const existingItem = orderDetails.find(detail => detail.bookId === book.bookId);

        if (existingItem) {
            if (existingItem.status === 1) {
                console.log("üîÑ S·∫£n ph·∫©m ƒë√£ c√≥, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng...");
                const updatedData = {
                    quantity: existingItem.quantity + quantity, // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng ƒë√£ ch·ªçn
                    price: book.price,
                    orderId: orderId,
                    bookId: book.bookId,
                    status: 1,
                };

                await updateOrderDetail(existingItem.orderDetailId, updatedData);
            } else {
                console.log("‚úÖ S·∫£n ph·∫©m ƒë√£ b·ªã x√≥a tr∆∞·ªõc ƒë√≥, kh√¥i ph·ª•c l·∫°i...");
                const restoreData = {
                    quantity: quantity, // S·ª≠ d·ª•ng s·ªë l∆∞·ª£ng ƒë√£ ch·ªçn
                    price: book.price,
                    orderId: orderId,
                    bookId: book.bookId,
                    status: 1, // Kh√¥i ph·ª•c tr·∫°ng th√°i v·ªÅ 1
                };

                await updateOrderDetail(existingItem.orderDetailId, restoreData);
            }
        } else {
            console.log("‚ûï S·∫£n ph·∫©m ch∆∞a c√≥, th√™m m·ªõi...");
            await createOrderDetail({
                orderId: orderId,
                bookId: book.bookId,
                quantity: quantity, // Th√™m s·ªë l∆∞·ª£ng ƒë√£ ch·ªçn
                price: book.price,
                status: 1,
            });
        }

        alert(`üéâ ƒê√£ th√™m ${quantity} s·∫£n ph·∫©m v√†o gi·ªè h√†ng!`);
    } catch (error) {
        console.error("‚ùå L·ªói khi th√™m v√†o gi·ªè h√†ng:", error);
        alert("ƒê√£ x·∫£y ra l·ªói khi th√™m v√†o gi·ªè h√†ng.");
    }
};

  const handleGenerateSummary = async () => {
    try {
      // Gi·∫£ l·∫≠p API call - Thay b·∫±ng API th·ª±c t·∫ø c·ªßa b·∫°n
      const fakeApiCall = () => 
        new Promise(resolve => 
          setTimeout(() => resolve(book?.summary || "  N·ªôi dung t√≥m t·∫Øt chi ti·∫øt s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t trong phi√™n b·∫£n k·∫ø ti·∫øp..."), 1000)
        );

      const summary = await fakeApiCall();
      setGeneratedSummary(summary);
    } catch (error) {
      console.error("L·ªói khi t·∫°o t√≥m t·∫Øt:", error);
      setGeneratedSummary("Kh√¥ng th·ªÉ t·∫°o t√≥m t·∫Øt l√∫c n√†y, vui l√≤ng th·ª≠ l·∫°i sau.");
    }
  };

  const renderSummaryModal = () => (
    <div className={`modal ${showSummary ? "show" : ""}`} onClick={() => setShowSummary(false)}>
      <div className="modal-content" onClick={(e) => e.stopPropagation()}>
        <div className="modal-header">
          <h2>T√≥m t·∫Øt s√°ch {book?.bookName}</h2>
          <button className="close-btn" onClick={() => setShowSummary(false)}>
            &times;
          </button>
        </div>
        <div className="modal-body">
          <div className={`generating-text ${isGenerating ? "generating" : ""}`}>
            {displaySummary}
            {isGenerating && <span className="cursor">|</span>}
          </div>
          {!generatedSummary && (
            <button 
              className="generate-btn"
              onClick={handleGenerateSummary}
              disabled={isGenerating}
            >
              {isGenerating ? (
                <>
                  <i className="fas fa-spinner fa-spin"></i> ƒêang t·∫°o t√≥m t·∫Øt...
                </>
              ) : (
                <>
                  <i className="fas fa-robot"></i> T·∫°o t√≥m t·∫Øt b·∫±ng AI
                </>
              )}
            </button>
          )}
        </div>
      </div>
    </div>
  );

  if (loading) return <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>;
  if (!book) return <p>Kh√¥ng t√¨m th·∫•y s√°ch!</p>;

  return (
    <div className="book-detail-container">
      {renderSummaryModal()}
      <div className="book-detail">
        <div className="book-detail-left">
          <img src={book.bookImage} alt={book.bookName} className="book-detail-image" />

          <div className="quantity-selector">
            <button className="quantity-btn" onClick={handleDecrease}>-</button>
            <span className="quantity-number">{quantity}</span>
            <button className="quantity-btn" onClick={handleIncrease}>+</button>
          </div>

          <div className="book-actions">
            <button className="add-to-cart" onClick={handleAddToCart}>
              <i className="fas fa-shopping-cart"></i> Th√™m v√†o gi·ªè h√†ng
            </button>
            <button className="buy-now">Mua ngay</button>
          </div>

          <div className="book-policies">
            <h3>Ch√≠nh s√°ch ∆∞u ƒë√£i c·ªßa Bookify</h3>
            <ul>
              <li><i className="fas fa-truck"></i> Th·ªùi gian giao h√†ng: Giao nhanh v√† uy t√≠n</li>
              <li><i className="fas fa-exchange-alt"></i> Ch√≠nh s√°ch ƒë·ªïi tr·∫£: ƒê·ªïi tr·∫£ mi·ªÖn ph√≠ to√†n qu·ªëc</li>
              <li><i className="fas fa-users"></i> Ch√≠nh s√°ch kh√°ch s·ªâ: ∆Øu ƒë√£i khi mua s·ªë l∆∞·ª£ng l·ªõn</li>
            </ul>
          </div>
        </div>

        <div className="book-detail-right">
          <h1 className="book-title">{book.bookName}</h1>

          <div className="book-price-section">
            <p className="book-price">Gi√° s√°ch in: <strong>{book.price.toLocaleString()} VND</strong></p>
            {book.priceEbook && (
              <p className="book-ebook-price">Gi√° s√°ch ƒëi·ªán t·ª≠: <strong>{book.priceEbook.toLocaleString()} VND</strong></p>
            )}
          </div>

          <div className="book-description">
            <h3>M√¥ t·∫£</h3>
            <p>{book.description}</p>
          </div>

          <div className="book-specifications">
            <h3>Th√¥ng tin chi ti·∫øt</h3>
            <table>
              <tbody>
                <tr>
                  <th>NƒÉm xu·∫•t b·∫£n</th>
                  <td>{book.publishYear || "ƒêang c·∫≠p nh·∫≠t"}</td>
                </tr>
                <tr>
                  <th>Th·ªÉ lo·∫°i</th>
                  <td>{book.bookType || "ƒêang c·∫≠p nh·∫≠t"}</td>
                </tr>
              </tbody>
            </table>
          </div>

          <div className="summary-section">
            <button className="summary-btn" onClick={() => setShowSummary(true)}>
              <i className="fas fa-book-open"></i> Xem t√≥m t·∫Øt s√°ch
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default BookDetail;
