import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { getBookById } from "../../services/bookService";
import { getAccountID } from "../../services/accountService";
import { createOrder, getOrderByAccount } from "../../services/orderService";
import { getOrderDetailsByOrderId, createOrderDetail, updateOrderDetail } from "../../services/orderDetailService";
import "./BookDetail.css";

const BookDetail = () => {
  const { id } = useParams();
  const [book, setBook] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchBookDetail = async () => {
      const data = await getBookById(id);
      if (data) {
        setBook(data);
      } else {
        console.error("Kh√¥ng t√¨m th·∫•y s√°ch!");
      }
      setLoading(false);
    };

    fetchBookDetail();
  }, [id]);
  const handleAddToCart = async () => {
    const accountId = getAccountID();
    if (!accountId) {
        alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m v√†o gi·ªè h√†ng.");
        return;
    }

    try {
        console.log("üîç Ki·ªÉm tra ƒë∆°n h√†ng cho accountId:", accountId);

        let order = await getOrderByAccount(accountId);
        console.log("üì¶ ƒê∆°n h√†ng hi·ªán t·∫°i:", order);

        if (!order || !order.orderId) {
            console.log("üöÄ Kh√¥ng c√≥ ƒë∆°n h√†ng, t·∫°o m·ªõi...");
            order = await createOrder({
                accountId: accountId,
                voucherId: null,
                orderDetails: [],
            });

            console.log("üì§ ƒê∆°n h√†ng m·ªõi t·∫°o:", order);
            if (!order || !order.orderId) {
                alert("Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng.");
                return;
            }

            await new Promise(resolve => setTimeout(resolve, 500));
        }

        console.log("‚úÖ ƒê∆°n h√†ng c√≥ ID:", order.orderId);

        let orderDetails = await getOrderDetailsByOrderId(order.orderId);
        if (!orderDetails || orderDetails.length === 0) {
            console.log("üîÑ Ch·ªù API c·∫≠p nh·∫≠t OrderDetails...");
            await new Promise(resolve => setTimeout(resolve, 500));
            orderDetails = await getOrderDetailsByOrderId(order.orderId);
        }

        console.log("üõí OrderDetails hi·ªán c√≥:", orderDetails);

        const existingItem = orderDetails.find(detail => detail.bookId === book.bookId);

        if (existingItem) {
            if (existingItem.status === 1) {
                // üîÑ N·∫øu s·∫£n ph·∫©m c√≥ `status = 1`, th√¨ tƒÉng s·ªë l∆∞·ª£ng
                console.log("üîÑ S·∫£n ph·∫©m ƒë√£ c√≥, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng...");
                const updatedData = {
                    quantity: existingItem.quantity + 1,
                    price: book.price,
                    orderId: order.orderId,
                    bookId: book.bookId,
                    status: 1,
                };

                const updateResponse = await updateOrderDetail(existingItem.orderDetailId, updatedData);
                console.log("üìå K·∫øt qu·∫£ update:", updateResponse);

                if (!updateResponse) {
                    alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m.");
                    return;
                }
            } else {
                // üîÑ N·∫øu s·∫£n ph·∫©m c√≥ `status = 0`, c·∫≠p nh·∫≠t l·∫°i `status = 1` v√† reset s·ªë l∆∞·ª£ng
                console.log("‚úÖ S·∫£n ph·∫©m ƒë√£ b·ªã x√≥a tr∆∞·ªõc ƒë√≥, kh√¥i ph·ª•c l·∫°i...");
                const restoreData = {
                    quantity: 1, // Reset s·ªë l∆∞·ª£ng v·ªÅ 1
                    price: book.price,
                    orderId: order.orderId,
                    bookId: book.bookId,
                    status: 1, // Kh√¥i ph·ª•c tr·∫°ng th√°i v·ªÅ 1
                };

                const restoreResponse = await updateOrderDetail(existingItem.orderDetailId, restoreData);
                console.log("üìå K·∫øt qu·∫£ kh√¥i ph·ª•c s·∫£n ph·∫©m:", restoreResponse);

                if (!restoreResponse) {
                    alert("Kh√¥ng th·ªÉ kh√¥i ph·ª•c s·∫£n ph·∫©m v√†o gi·ªè h√†ng.");
                    return;
                }
            }
        } else {
            console.log("‚ûï S·∫£n ph·∫©m ch∆∞a c√≥, th√™m m·ªõi...");
            const newDetail = await createOrderDetail({
                orderId: order.orderId,
                bookId: book.bookId,
                quantity: 1,
                price: book.price,
                status: 1,
            });

            console.log("üìå K·∫øt qu·∫£ th√™m m·ªõi:", newDetail);

            if (!newDetail) {
                alert("Kh√¥ng th·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng.");
                return;
            }
        }

        alert("üéâ S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o gi·ªè h√†ng!");
    } catch (error) {
        console.error("‚ùå L·ªói khi th√™m v√†o gi·ªè h√†ng:", error);
        alert("ƒê√£ x·∫£y ra l·ªói khi th√™m v√†o gi·ªè h√†ng.");
    }
};



  if (loading) {
    return <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>;
  }

  if (!book) {
    return <p>Kh√¥ng t√¨m th·∫•y s√°ch!</p>;
  }

  return (
    <div className="book-detail-container">
      <div className="book-detail">
        <div className="book-detail-left">
          <img src={book.bookImage} alt={book.bookName} className="book-detail-image" />
          <div className="book-actions">
            <button className="add-to-cart" onClick={handleAddToCart}>
              <i className="fas fa-shopping-cart"></i> Th√™m v√†o gi·ªè h√†ng
            </button>
            <button className="buy-now">Mua ngay</button>
          </div>
          <div className="book-policies">
            <h3>Ch√≠nh s√°ch ∆∞u ƒë√£i c·ªßa Bookify</h3>
            <ul>
              <li>
                <i className="fas fa-truck"></i> Th·ªùi gian giao h√†ng: Giao nhanh v√† uy t√≠n
              </li>
              <li>
                <i className="fas fa-exchange-alt"></i> Ch√≠nh s√°ch ƒë·ªïi tr·∫£: ƒê·ªïi tr·∫£ mi·ªÖn ph√≠ to√†n qu·ªëc
              </li>
              <li>
                <i className="fas fa-users"></i> Ch√≠nh s√°ch kh√°ch s·ªâ: ∆Øu ƒë√£i khi mua s·ªë l∆∞·ª£ng l·ªõn
              </li>
            </ul>
          </div>
        </div>

        <div className="book-detail-right">
          <h1 className="book-title">{book.bookName}</h1>

          <div className="book-price-section">
            <p className="book-price">
              Gi√° s√°ch in: <strong>{book.price.toLocaleString()} VND</strong>
            </p>
            {book.priceEbook && (
              <p className="book-ebook-price">
                Gi√° s√°ch ƒëi·ªán t·ª≠: <strong>{book.priceEbook.toLocaleString()} VND</strong>
              </p>
            )}
          </div>

          <div className="book-description">
            <h3>M√¥ t·∫£</h3>
            <p>{book.bookContent}</p>
          </div>

          <div className="book-specifications">
            <h3>Th√¥ng tin chi ti·∫øt</h3>
            <table>
              <tbody>
                <tr>
                  <th>NƒÉm xu·∫•t b·∫£n</th>
                  <td>{book.publishYear || "ƒêang c·∫≠p nh·∫≠t"}</td>
                </tr>
                <tr>
                  <th>Th·ªÉ lo·∫°i</th>
                  <td>{book.bookType || "ƒêang c·∫≠p nh·∫≠t"}</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  );
};

export default BookDetail;
